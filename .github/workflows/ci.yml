name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run tests with race detector
      run: go test -race -v ./...
    
    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.go-version == '1.24'
      with:
        file: ./coverage.out
        fail_ci_if_error: true

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run compression and limits integration tests
      run: |
        echo "Running compression/limits integration tests..."
        go test -v -tags=integration \
          -run="TestSyncHandler_CompressionSizeLimits|TestHTTPTransport_ClientCompression|TestCursorAPI_Compression" \
          ./transport/httptransport/
    
    - name: Run SQLite WAL integration tests
      run: |
        echo "Running SQLite WAL integration tests..."
        go test -v -tags=integration \
          -run="TestSQLiteEventStore_WAL" \
          ./storage/sqlite/
    
    - name: Run end-to-end integration tests
      run: |
        echo "Running end-to-end integration tests..."
        go test -v -tags=integration \
          -run="TestEndToEnd" \
          ./...

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -count=3 ./... > benchmark_results.txt
        cat benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.txt

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
    
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
